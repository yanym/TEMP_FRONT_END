{"version":3,"sources":["components/Showtime.js","App.js","serviceWorker.js","index.js"],"names":["Showtime","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","pagination","filters","sorter","console","log","setState","filteredInfo","sortedInfo","clearFilters","clearAll","setAgeSort","order","columnKey","state","dataSource","id","days","calve","_this$state","columns","title","dataIndex","key","a","b","sortOrder","text","value","filteredValue","onFilter","record","includes","length","react_default","createElement","className","es_button","onClick","table","onChange","React","Component","App","Showtime_Showtime","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAKqBA,6BACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8DRQ,aAAe,SAACC,EAAYC,EAASC,GACnCC,QAAQC,IAAI,qBAAsBJ,EAAYC,EAASC,GACvDV,EAAKa,SAAS,CACZC,aAAcL,EACdM,WAAYL,KAnEGV,EAuEnBgB,aAAe,WACbhB,EAAKa,SAAS,CAAEC,aAAc,QAxEbd,EA2EnBiB,SAAW,WACTjB,EAAKa,SAAS,CACZC,aAAc,KACdC,WAAY,QA9EGf,EAkFnBkB,WAAa,WACXlB,EAAKa,SAAS,CACZE,WAAY,CACVI,MAAO,UACPC,UAAW,SApFfpB,EAAKqB,MAAQ,CACXP,aAAc,KACdC,WAAY,KACZO,WAAY,IALGtB,oFAmChBG,KAAKkB,MAAMC,WAzBK,CAAC,CAChBC,GAAI,UACJC,KAAM,EACNC,MAAO,OACN,CACDF,GAAI,UACJC,KAAM,EACNC,MAAO,OACN,CACDF,GAAI,UACJC,KAAM,EACNC,MAAO,OACN,CACDF,GAAI,UACJC,KAAM,EACNC,MAAO,yCAkEF,IAAAC,EAC4BvB,KAAKkB,MAAlCN,EADCW,EACDX,WAAYD,EADXY,EACWZ,aAElBA,EAAeA,GAAgB,GAE/B,IAAMa,EAAU,CAChB,CACEC,MAAO,KACPC,UAAW,KACXC,IAAK,KACLpB,OAAQ,SAACqB,EAAGC,GAAJ,OAAUD,EAAER,GAAKS,EAAET,IAC3BU,UAAoC,QATtClB,EAAaA,GAAc,IASHK,WAAsBL,EAAWI,OACtD,CACDS,MAAO,OACPC,UAAW,OACXC,IAAK,OACLpB,OAAQ,SAACqB,EAAGC,GAAJ,OAAUD,EAAEP,KAAOQ,EAAER,MAC7BS,UAAoC,SAAzBlB,EAAWK,WAAwBL,EAAWI,OACxD,CACDS,MAAO,QACPC,UAAW,QACXC,IAAK,QACLrB,QAAS,CACP,CAAEyB,KAAM,MAAOC,MAAO,OACtB,CAAED,KAAM,KAAMC,MAAO,OAEvBC,cAAetB,EAAaW,OAAS,KACrCY,SAAU,SAACF,EAAOG,GAAR,OAAmBA,EAAOb,MAAMc,SAASJ,IACnDzB,OAAQ,SAACqB,EAAGC,GAAJ,OAAUD,EAAEN,MAAMe,OAASR,EAAEP,MAAMe,QAC3CP,UAAoC,UAAzBlB,EAAWK,WAAyBL,EAAWI,QAkB5D,OACEsB,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,OAAKC,UAAU,oBACbF,EAAAV,EAAAW,cAACE,EAAA,EAAD,CAAQC,QAAS1C,KAAKe,YAAtB,WACAuB,EAAAV,EAAAW,cAACE,EAAA,EAAD,CAAQC,QAAS1C,KAAKa,cAAtB,iBACAyB,EAAAV,EAAAW,cAACE,EAAA,EAAD,CAAQC,QAAS1C,KAAKc,UAAtB,6BACAwB,EAAAV,EAAAW,cAACE,EAAA,EAAD,CAAQC,QAAS1C,KAAKc,UAAtB,YAEFwB,EAAAV,EAAAW,cAACI,EAAA,EAAD,CAAOnB,QAASA,EAASL,WAAYnB,KAAKkB,MAAMC,WAAYyB,SAAU5C,KAAKI,uBAnJ7CyC,IAAMC,YCS7BC,mLARX,OACET,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAACS,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAV,EAAAW,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75629592.chunk.js","sourcesContent":["import { Table, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport React from \"react\";\nimport axios from 'axios';\n\nexport default class Showtime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredInfo: null,\n      sortedInfo: null,\n      dataSource: []\n    }\n  }\n  componentWillMount() {\n    //模拟获取的网络数据，数据如下\n    const dataTest = [{\n      id: '2014669',\n      days: 1,\n      calve: 'Yes'\n    }, {\n      id: '2014670',\n      days: 2,\n      calve: 'Yes'\n    }, {\n      id: '2014671',\n      days: 3,\n      calve: 'Yes'\n    }, {\n      id: '2014672',\n      days: 4,\n      calve: 'Yes'\n    }];\n/*\n    axios.get(`https://jsonplaceholder.typicode.com/todos/1`)\n      .then(res => {\n        // TBD\n        for (var i = 0, l = dataTest.length; i < l; i++) {\n          this.state.dataSource.push(dataTest[i]);\n      }\n      */\n     this.state.dataSource = dataTest;\n        // console.log(res.data)\n        // this.state.dataSource.push(dataTest);\n        // console.log(this.state.dataSource);\n\n\n\n        // res.data.map((v,i) => {\n        //   console.log(v);\n        //   this.state.dataSource.push({\n        //     key: v.id,\n        //     id: v.id,\n        //     calve:v.title,\n        //   })\n        // })\n// 这里还有一个\n    //});\n\n    //解析，丢到datasource中\n    // data.map((v,i) => {\n    //   this.state.dataSource.push({\n    //     key: v.id,\n    //     id: v.id,\n    //     calve:v.calve,\n    //   })\n    // })\n  }\n\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  }\n\n  clearFilters = () => {\n    this.setState({ filteredInfo: null });\n  }\n\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  }\n\n  setAgeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'id',\n      },\n    });\n  }\n\n  render() {\n    let { sortedInfo, filteredInfo } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    \n    const columns = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => a.id - b.id,\n      sortOrder: sortedInfo.columnKey === 'id' && sortedInfo.order,\n    }, {\n      title: 'days',\n      dataIndex: 'days',\n      key: 'days',\n      sorter: (a, b) => a.days - b.days,\n      sortOrder: sortedInfo.columnKey === 'days' && sortedInfo.order,\n    }, {\n      title: 'calve',\n      dataIndex: 'calve',\n      key: 'calve',\n      filters: [\n        { text: 'Yes', value: 'Yes' },\n        { text: 'No', value: 'No' },\n      ],\n      filteredValue: filteredInfo.calve || null,\n      onFilter: (value, record) => record.calve.includes(value),\n      sorter: (a, b) => a.calve.length - b.calve.length,\n      sortOrder: sortedInfo.columnKey === 'calve' && sortedInfo.order,\n    }\n    \n    // , {\n    //   title: 'Address',\n    //   dataIndex: 'address',\n    //   key: 'address',\n    //   filters: [\n    //     { text: 'London', value: 'London' },\n    //     { text: 'New York', value: 'New York' },\n    //   ],\n    //   filteredValue: filteredInfo.address || null,\n    //   onFilter: (value, record) => record.address.includes(value),\n    //   sorter: (a, b) => a.address.length - b.address.length,\n    //   sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,\n    // }\n  ];\n    \n    return (\n      <div>\n        <div className=\"table-operations\">\n          <Button onClick={this.setAgeSort}>Sort ID</Button>\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n          <Button onClick={this.clearAll}>Refresh</Button>\n        </div>\n        <Table columns={columns} dataSource={this.state.dataSource} onChange={this.handleChange} />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Showtime from './components/Showtime';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Showtime />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}